generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model logoimage {
  id        Int    @id @default(autoincrement())
  image_url String @db.VarChar(255)
}

model sliderimages {
  id              Int    @id @default(autoincrement())
  sliderimage_url String @db.VarChar(255)
}

model CardCategory {
  id        Int             @id @default(autoincrement())
  name      String          @db.VarChar(100)  // e.g., "Birthday", "Wedding"
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  templates CardTemplate[]
}

model CardTemplate {
  id           Int          @id @default(autoincrement())
  categoryId   Int
  title        String       @db.VarChar(150)
  description  String?      @db.Text
  imageUrl     String       @db.VarChar(512)
  prompt       String       @db.Text
  aspectRatio  String       @default("16:9")
  uses         Int          @default(0)
  featured     Boolean      @default(false)   // ✅ admin picks
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  category     CardCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  generated    UserGeneratedImage[]
  favouritedBy UserFavouriteTemplate[]
}


model UserGeneratedImage {
  id         Int           @id @default(autoincrement())
  userId     Int
  templateId Int?                          // optional: which template was used
  prompt     String?       @db.Text        // prompt used for generation
  imageUrl   String        @db.VarChar(512) // generated image url (firebase)
  createdAt  DateTime      @default(now())

  user       users         @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  template   CardTemplate? @relation(fields: [templateId], references: [id])

  @@index([userId])
  @@index([templateId])
}

model UserFavouriteTemplate {
  id         Int          @id @default(autoincrement())
  userId     Int
  templateId Int
  createdAt  DateTime     @default(now())

  user       users        @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  template   CardTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([userId, templateId]) // ✅ prevent duplicates
  @@index([userId])
  @@index([templateId])
}

model userimages {
  id         Int      @id @default(autoincrement())
  user_id    Int      @unique
  image_url  String   @db.VarChar(512)
  created_at DateTime @default(now()) @db.Timestamp(0)
  users      users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "userimage_ibfk_1")

  @@index([user_id], map: "user_id")
}

model users {
  user_id      Int                  @id @default(autoincrement())
  name         String               @db.VarChar(100)
  email        String               @unique(map: "email") @db.VarChar(100)
  password     String               @db.VarChar(255)
  phone        String?              @db.VarChar(20)
  termsStatus  Boolean              @default(false)
  city         String?
  address      String?
  refreshToken String? 
  created_at   DateTime             @default(now()) @db.DateTime(0)

  userimages   userimages[]
  generated    UserGeneratedImage[]
  favourites   UserFavouriteTemplate[]
}


model Apppdffiles {
  id    Int    @id @default(autoincrement())
  title String
  url   String
}


model AboutMe {
  id        Int    @id @default(autoincrement())
  paragraph String @db.Text
}

model MissionVision {
  id        Int    @id @default(autoincrement())
  paragraph String @db.Text
}

model PrivacyPolicy {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255) 
  content   String   @db.Text         // Long text with full policy
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AboutApp {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255) 
  content   String   @db.Text         // Long text description of the game
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model security {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text         // Long text description of the game
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FAQ {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
